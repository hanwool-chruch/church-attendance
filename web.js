// Generated by CoffeeScript 1.10.0
(function() {
  var app, bodyParser, express, fs, http, io, passport, path, port, routes, server, socketio, sync;
	var cookieParser = require('cookie-parser')
	var parser = require('json-parser');

  port = Number(process.env.PORT || 8000);

  express = require("express");

  app = express();

  routes = require("./server/routes");

  http = require("http");

  path = require("path");

  socketio = require("socket.io");

  fs = require("fs");

  passport = require("passport");

  bodyParser = require("body-parser");

  sync = require("async");

  app.use(express["static"](__dirname + "/app"));

  app.use(bodyParser.json());
	app.use(cookieParser())

  app.use(bodyParser.urlencoded({
    extended: true
  }));

  server = app.listen(port, function() {
    return console.log("Listening on port %d", server.address().port);
  });




	app.all('/rest/*', function(req, res, next) {

		var parser_data = parser.parse(req.cookies.globals);

		currentUser = parser_data.currentUser

		if(req.cookies==null || req.cookies.globals==null || currentUser==null || currentUser.username == null)
			req.db_type = "infant";
		else
			req.db_type = currentUser.username ;

		next();  // call next() here to move on to next middleware/router
	})

  app.get("/rest/codeList", routes.codeList);


  /* 대원관리 */

  app.get("/rest/member", routes.memberList);

  app.post("/rest/member", routes.insertMember);

  app.put("/rest/member", routes.updateMember);


  app.get("/rest/member", routes.memberList);
	app.get("/rest/longabsentee", routes.longAbsentee);
	app.get("/rest/latestabsentee", routes.latestAbsentee);
	app.get("/rest/baptism", routes.baptism);
	app.get("/rest/sortedmember", routes.sortedMemberList);
	app.get("/rest/birthdaymember", routes.birthDayMemberList);

  app.get("/rest/member/:memberId", routes.member);
  app.get('/photo/:uid/:file', function(req, res){
    var uid = req.params.uid
      , file = req.params.file;

    res.sendfile('/home/ubuntu/church-management/app/photo/' + uid + '/' + file);
  });

  app["delete"]("/rest/member/:memberId", routes.deleteMember);
	
	app.post("/rest/member/uploadPhoto/:memberId", routes.uploadPhoto);

  /* 출석관리 */

  app.get("/rest/att/list/:page", routes.attList);

  app.post("/rest/att/:practiceDt/:practiceCd", routes.createPracticeInfo);

  app["delete"]("/rest/att/:practiceDt/:practiceCd", routes.removeAttInfo);

  app.get("/rest/att/:practiceDt/:practiceCd", routes.attInfoDetail);

  app.put("/rest/att/:practiceDt/:practiceCd/musicInfo", routes.saveMusicInfo);

  app.put("/rest/att/:practiceDt/:practiceCd/etcMsg", routes.saveEtcMsg);

  app.post("/rest/att/:practiceDt/:practiceCd/select", routes.select);

  app.post("/rest/att/:practiceDt/:practiceCd/deselect", routes.deselect);

  app.put("/rest/att/:practiceDt/:practiceCd/lockAtt", routes.lockAtt);

  app.put("/rest/att/:practiceDt/:practiceCd/unlockAtt", routes.unlockAtt);

  app.put("/rest/att/:practiceDt/:partCd/report", routes.saveReport);

  /* 출석순위 */

  app.get("/rest/rank", routes.rank);


  /* 회의록 */

  app.get("/rest/doc", routes.docList);

  app.get("/rest/doc/:docId", routes.modifyDoc);


  /* 이벤트 */

  app.get("/rest/calendar", routes.calendar);


  /* 웹소켓 */

  io = socketio.listen(server);

  io.on("connection", function(socket) {

    /* 연습정보 상세정보 입장 */
    socket.on("join", function(data) {
      socket.join(data);
      return socket.room = data;
    });

    /* 연습정보 목록 입장 */
    socket.on("hallJoin", function() {
      return socket.join("hall");
    });

    /* 연습곡 정보 갱신 */
    socket.on("refreshMusicInfo", function(data) {
      io.sockets["in"]("hall").emit("refreshPage", "행사 정보가 갱신되었습니다.");
      return io.sockets["in"](socket.room).emit("replaceMusicInfo", data);
    });

    /* 메모 갱신 */
    socket.on("refreshEtcMsg", function(data) {
      io.sockets["in"]("hall").emit("refreshPage", "일정이 변경 되었습니다.");
      return io.sockets["in"](socket.room).emit("replaceEtcMsg", data);
    });

		/* 메모 갱신 */
    socket.on("refreshReport", function(data) {
      io.sockets["in"]("hall").emit("refreshPage", "교사보고서 내용이 변경 되었습니다.");
      return io.sockets["in"](socket.room).emit("replaceEtcMsg", data);
    });

    /* 마감 (목록과 상세 두군데로 보내야 함) */
    socket.on("closeAtt", function() {
      io.sockets["in"]("hall").emit("refreshPage", "연습정보가 마감되었습니다.");
      return io.sockets["in"](socket.room).emit("refreshPage", "연습정보가 마감되었습니다.");
    });

    /* 마감 해제 (목록과 상세 두군데로 보내야 함) */
    socket.on("uncloseAtt", function() {
      io.sockets["in"]("hall").emit("refreshPage", "연습정보가 마감 해제 되었습니다.");
      return io.sockets["in"](socket.room).emit("refreshPage", "연습정보가 마감 해제 되었습니다.");
    });
    socket.on("addAtt", function() {
      return io.sockets["in"]("hall").emit("refreshPage", "새로운 연습정보가 추가되었습니다.");
    });

    /* 연습정보 삭제 */
    socket.on("removeAtt", function() {
      io.sockets["in"]("hall").emit("refreshPage", "연습정보가 삭제되었습니다.");
      return io.sockets["in"](socket.room).emit("backToList", "연습정보가 삭제되었습니다.");
    });

    /* 출석 체크 */
    return socket.on("select", function(data) {
      console.log("select Client Send Data:", data);
      return io.sockets["in"](socket.room).emit("select", data);
    });
  });

}).call(this);

//# sourceMappingURL=web.js.map
